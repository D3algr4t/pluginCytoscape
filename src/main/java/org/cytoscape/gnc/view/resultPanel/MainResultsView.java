package org.cytoscape.gnc.view.resultPanel;

import java.awt.Component;
import java.io.File;
import java.io.IOException;
import javax.swing.Icon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.cytoscape.application.swing.CytoPanelComponent;
import org.cytoscape.application.swing.CytoPanelName;
import org.cytoscape.gnc.controller.ResultPanelController;
import org.cytoscape.gnc.controller.utils.CySwing;
import org.cytoscape.gnc.model.businessobjects.GNCResult;

/**
 * @license Apache License V2 <http://www.apache.org/licenses/LICENSE-2.0.html>
 * @author Juan José Díaz Montaña
 */
public class MainResultsView extends javax.swing.JPanel implements CytoPanelComponent {
    private final ResultPanelController resultPanelController;
    private final GNCResult result;
    
    /**
     * Creates new form MainResultsView
     */
    public MainResultsView(ResultPanelController resultPanelController) {
        this.resultPanelController = resultPanelController;
        this.result = resultPanelController.getResult();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dbLabel = new javax.swing.JLabel();
        gncLabel = new javax.swing.JLabel();
        databaseName = new javax.swing.JLabel();
        gnc = new javax.swing.JLabel();
        networkLabel = new javax.swing.JLabel();
        networkName = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        commonGenesLabel = new javax.swing.JLabel();
        commonGenes = new javax.swing.JLabel();
        ppvLabel = new javax.swing.JLabel();
        ppv = new javax.swing.JLabel();
        fLabel = new javax.swing.JLabel();
        fMeasure = new javax.swing.JLabel();
        closeResultsButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        downloadResultsButton = new javax.swing.JButton();

        dbLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        dbLabel.setText("Database");

        gncLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        gncLabel.setText("GNC value");

        databaseName.setText(result.getDb().getName());

        gnc.setText(String.format("%.6f", result.getGNC()));

        networkLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        networkLabel.setText("Input Network");

        networkName.setText(result.getNetwork().getName());

        commonGenesLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        commonGenesLabel.setText("Common Genes");

        commonGenes.setText(Integer.toString(result.getGenes().length));

        ppvLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        ppvLabel.setText("PPV value");

        ppv.setText(String.format("%.6f", result.getPPV()));

        fLabel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        fLabel.setText("F-Measure value");

        fMeasure.setText(String.format("%.6f", result.getFMeasure()));

        closeResultsButton.setText("Close results");
        closeResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeResultsButtonActionPerformed(evt);
            }
        });

        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { "Nodes", result.getNetwork().getNodes().length, result.getDb().getNodes().length },
                { "Edges", result.getNetwork().getEdges().size(), result.getDb().getEdges().size() },
                { "Density", String.format("%.3f", result.getNetwork().getDensity()), String.format("%.3f", result.getDb().getDensity()) }
            },
            new String [] {
                "", "Input Network", "Biological Database"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(resultsTable);

        downloadResultsButton.setText("Save coherence matrix");
        downloadResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadResultsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fLabel)
                            .addComponent(ppvLabel)
                            .addComponent(gncLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(gnc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ppv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fMeasure, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(networkLabel)
                                    .addComponent(dbLabel))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(databaseName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(networkName, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(commonGenesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(commonGenes, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(downloadResultsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(closeResultsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(networkLabel)
                    .addComponent(networkName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dbLabel)
                    .addComponent(databaseName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gncLabel)
                    .addComponent(gnc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ppvLabel)
                    .addComponent(ppv))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fLabel)
                    .addComponent(fMeasure))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commonGenesLabel)
                    .addComponent(commonGenes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(downloadResultsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeResultsButton)
                .addContainerGap())
        );

        databaseName.getAccessibleContext().setAccessibleName("databaseName");
        gnc.getAccessibleContext().setAccessibleName("");
        networkName.getAccessibleContext().setAccessibleName("");
        commonGenes.getAccessibleContext().setAccessibleName("");
        ppv.getAccessibleContext().setAccessibleName("ppv");
        fMeasure.getAccessibleContext().setAccessibleName("fMeasure");
    }// </editor-fold>//GEN-END:initComponents

    private void closeResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeResultsButtonActionPerformed
        resultPanelController.dispose();
    }//GEN-LAST:event_closeResultsButtonActionPerformed

    private void downloadResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadResultsButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Save coherence matrix");
        chooser.setSelectedFile(new File("coherenceMatrix.csv"));
        chooser.setFileFilter(new FileNameExtensionFilter("CSV file", "csv"));
        int retrival = chooser.showSaveDialog(CySwing.getDesktopJFrame());
        if (retrival == JFileChooser.APPROVE_OPTION) {
            try {
                String fileName = chooser.getSelectedFile().getCanonicalPath();
                if (!fileName.endsWith(".csv")) {
                    fileName += ".csv";
                }
                this.result.printMatrixToFile(fileName);
            } catch (IOException ex) {
                CySwing.displayPopUpMessage("Coudln't save the coherence matrix.");
            }
        }
    }//GEN-LAST:event_downloadResultsButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeResultsButton;
    private javax.swing.JLabel commonGenes;
    private javax.swing.JLabel commonGenesLabel;
    private javax.swing.JLabel databaseName;
    private javax.swing.JLabel dbLabel;
    private javax.swing.JButton downloadResultsButton;
    private javax.swing.JLabel fLabel;
    private javax.swing.JLabel fMeasure;
    private javax.swing.JLabel gnc;
    private javax.swing.JLabel gncLabel;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel networkLabel;
    private javax.swing.JLabel networkName;
    private javax.swing.JLabel ppv;
    private javax.swing.JLabel ppvLabel;
    private javax.swing.JTable resultsTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public Component getComponent() {
        return this;
    }

    @Override
    public CytoPanelName getCytoPanelName() {
         return CytoPanelName.EAST;
    }

    @Override
    public String getTitle() {
        return "GNC";
    }

    @Override
    public Icon getIcon() {
        return null;
    }
}